service: ml-kraken-api

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-aws-documentation
  - serverless-offline-sqs

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations
  serverless-offline-sqs:
    autoCreate: true                 # create queue if not exists
    apiVersion: '2012-11-05'
    endpoint: http://0.0.0.0:9324
    region: eu-west-1
    accessKeyId: root
    secretAccessKey: root
    skipCacheInvalidation: false

  # You must have the documentation object
  documentation:
    api:
      info:
        version: '1'
        title: ML-Kraken-API
        description: API for ML-Kraken
        termsOfService: https://www.google.com
        contact:
          name: Jakub Wszolek
          url: https://github.com/datamass-io/ml-kraken
          email: j.wszolek@datamass.io
        license:
          name: The license
          url: https://www.github.com
    # Now we describe all the models that we use
    models:
      -
        name: MessageResponse
        contentType: "application/json"
#        schema: ${file(models/error.json)}
        schema:
          type: object
          properties:
            id:
              type: string
            ver:
              type: string
            name:
              type: string
            user:
              type: string
            createdAt:
              type: string
            updatedAt:
              type: string

provider:
  name: aws
  runtime: nodejs10.x
  region: eu-west-1
  environment:
    DYNAMODB_MMETA: ModelMetaTbl
    DYNAMODB_MSTATUS: ModelStatusTbl
    DYNAMODB_MACTION: ModelActionTbl
    DYNAMODB_MTASK: ModelTaskTbl
    DYNAMODB_MLOG: ModelLogTbl
    SQS_URL:
      Ref: ActionQueue
    TaskExecutionRoleArn:
      Ref: ECSTaskExecutionRole
    PublicSubnet:
      Ref: PublicSubnetTwo
    ECS_CLUSTER:
      Ref: ECSCluster
    VPC:
      Ref: VPC
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:eu-west-1:*:*"
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:GetQueueUrl
        - sqs:ListQueues
      Resource: "arn:aws:sqs:eu-west-1:*:*"
    - Effect: Allow
      Action:
        - ecs:CreateCluster
        - ecs:ListServices
        - ecs:ListContainerInstances
        - ecs:ListTasks
        - ecs:DescribeClusters
        - ecs:DescribeServices
        - ecs:DescribeTaskDefinition
        - ecs:DescribeTasks
        - ecs:DescribeContainerInstances
        - ecs:CreateService
        - ecs:DeleteService
        - ecs:UpdateService
        - ecs:StartTask
        - ecs:RegisterTaskDefinition
        - ecs:DeregisterTaskDefinition
        - ecs:RunTask
        - ecs:StopTask
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - iam:PassRole
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:DescribeLogGroups
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - ec2:AuthorizeSecurityGroupEgress
        - ec2:AuthorizeSecurityGroupIngress
        - ec2:CreateSecurityGroup
        - ec2:DescribeNetworkInterfaces
      Resource:
        - "*"


functions:

  ecs-cloudwatch:
    handler: model-action/ecsWatchMonitor.ecsCloudWatch
    events:
      - cloudwatchEvent:
          event:
            source:
              - 'aws.ecs'
            detail-type:
              - "ECS Task State Change"
              - "ECS Container Instance State Change"

#  task-definition:
#    handler: model-action/taskDefinition.taskDefinition
#    events:
#      - http:
#          path: api/v1/model-action/task-def
#          method: post
#          integration: lambda
#          cors: true

  sqs-consumer:
    handler: model-action/sqsTaskConsumer.consumer
    events:
      - sqs:
#          arn: rn:aws:sqs:region:XXXXXX:default
          arn:
            Fn::GetAtt: [ActionQueue, Arn]

  model-logs-list:
    handler: model-logs/listLogs.listLogs
    events:
      - http:
          path: api/v1/model-logs/{id}
          method: get
          integration: lambda
          cors: true

  model-action-run:
    handler: model-action/takeAction.takeAction
    events:
      - http:
          path: api/v1/model-action
          method: post
          integration: lambda
          cors: true

  model-meta-create:
    handler: model-meta/create.create
    events:
      - http:
          path: api/v1/model-meta
          method: post
          integration: lambda
          cors: true
          documentation:
            summary: Post a model definition
#            description: >
#              Demonstrates a POST method.
            queryParams:
              - name: name
                required: true
              - name: ver
                #description: The second param. This one is optional
                required: true
              - name: uri
                required: true
              - name: user
                required: true
            methodResponses:
              - statusCode: '200'
                responseModels:
                  "application/json": MessageResponse


  model-meta-list:
    handler: model-meta/list.list
    events:
      - http:
          path: api/v1/model-meta
          method: get
          integration: lambda
          cors: true
#          documentation:
#            summary: Get all models
##            description: >
##              Demonstrates a POST method.
#            methodResponses:
#              - statusCode: '200'
#                responseModels:
#                  "application/json": MessageResponse


  model-meta-get:
    handler: model-meta/get.get
    events:
      - http:
          path: api/v1/model-meta/{id}
          method: get
          integration: lambda
          cors: true
#          documentation:
#            summary: Get all models
#            #            description: >
#            #              Demonstrates a POST method.
#            queryParams:
#              - id: name
#                required: true
#            methodResponses:
#              - statusCode: '200'
#                responseModels:
#                  "application/json": MessageResponse


  model-meta-update:
    handler: model-meta/update.update
    events:
      - http:
          path: api/v1/model-meta/{id}
          method: put
          integration: lambda
          cors: true
#          documentation:
#            summary: Update model.
#            #            description: >
#            #              Demonstrates a POST method.
#            methodResponses:
#              - statusCode: '200'
#                responseModels:
#                  "application/json": MessageResponse


  model-meta-delete:
    handler: model-meta/delete.deleteM
    events:
      - http:
          path: api/v1/model-meta/{id}
          method: delete
          integration: lambda
          cors: true
#          documentation:
#            summary: Delete model.
#            #            description: >
#            #              Demonstrates a POST method.
#            methodResponses:
#              - statusCode: '200'
#                responseModels:
#                  "application/json": MessageResponse


resources:
  ## FARGATE ECS cluster setup - params
  Parameters:
    ServiceName:
      Type: String
      Default: dockerFargate
      Description: A name for the service
    ImageUrl:
      Type: String
      Default: stepfunctiontest:latest
      Description: The url of a docker image that contains the application process that
        will handle the traffic for this service
    ContainerPort:
      Type: Number
      Default: 80
      Description: What port number the application inside the docker container is binding to
    ContainerCpu:
      Type: Number
      Default: 256
      Description: How much CPU to give the container. 1024 is 1 CPU
    ContainerMemory:
      Type: Number
      Default: 512
      Description: How much memory in megabytes to give the container
    Path:
      Type: String
      Default: "*"
      Description: A path on the public load balancer that this service
        should be connected to. Use * to send all load balancer
        traffic to this service.
    Priority:
      Type: Number
      Default: 1
      Description: The priority for the routing rule added to the load balancer.
        This only applies if your have multiple services which have been
        assigned to different paths on the load balancer.
    DesiredCount:
      Type: Number
      Default: 0
      Description: How many copies of the service task to run
    Role:
      Type: String
      Default: ""
      Description: (Optional) An IAM role to give the service's containers if the code within needs to
        access other AWS resources like S3 buckets, DynamoDB tables, etc

  Conditions:
    HasCustomRole: !Not [ !Equals [!Ref 'Role', ''] ]

  Resources:
    ModelMetaTbl:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_MMETA}
#    ModelStatusTbl:
#      Type: 'AWS::DynamoDB::Table'
#      DeletionPolicy: Retain
#      Properties:
#        AttributeDefinitions:
#          - AttributeName: id
#            AttributeType: S
#        KeySchema:
#          - AttributeName: id
#            KeyType: HASH
#        ProvisionedThroughput:
#          ReadCapacityUnits: 1
#          WriteCapacityUnits: 1
#        TableName: ${self:provider.environment.DYNAMODB_MSTATUS}
    ModelTaskTbl:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_MTASK}
    ActionQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "ActionQueue"
    ModelLogTbl:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_MLOG}


    # VPC in which containers will be networked.
    # It has two public subnets
    # We distribute the subnets across the first two available subnets
    # for the region, for high availability.
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        EnableDnsSupport: true
        EnableDnsHostnames: true
        CidrBlock: '10.0.0.0/16'

    # Two public subnets, where containers can have public IP addresses
    PublicSubnetOne:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone:
          Fn::Select:
            - 0
            - Fn::GetAZs: {Ref: 'AWS::Region'}
        VpcId: !Ref 'VPC'
        CidrBlock: '10.0.0.0/24'
        MapPublicIpOnLaunch: true
    PublicSubnetTwo:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone:
          Fn::Select:
            - 1
            - Fn::GetAZs: {Ref: 'AWS::Region'}
        VpcId: !Ref 'VPC'
        CidrBlock: '10.0.1.0/24'
        MapPublicIpOnLaunch: true

    # Setup networking resources for the public subnets. Containers
    # in the public subnets have public IP addresses and the routing table
    # sends network traffic via the internet gateway.
    InternetGateway:
      Type: AWS::EC2::InternetGateway
    GatewayAttachement:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref 'VPC'
        InternetGatewayId: !Ref 'InternetGateway'
    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref 'VPC'
    PublicRoute:
      Type: AWS::EC2::Route
      DependsOn: GatewayAttachement
      Properties:
        RouteTableId: !Ref 'PublicRouteTable'
        DestinationCidrBlock: '0.0.0.0/0'
        GatewayId: !Ref 'InternetGateway'
    PublicSubnetOneRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnetOne
        RouteTableId: !Ref PublicRouteTable
    PublicSubnetTwoRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnetTwo
        RouteTableId: !Ref PublicRouteTable

    # ECS Resources
    ECSCluster:
      Type: AWS::ECS::Cluster

    # A security group for the containers we will run in Fargate.
    # Two rules, allowing network traffic from a public facing load
    # balancer and from other members of the security group.
    #
    # Remove any of the following ingress rules that are not needed.
    # If you want to make direct requests to a container using its
    # public IP address you'll need to add a security group rule
    # to allow traffic from all IP addresses.
    FargateContainerSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Access to the Fargate containers
        VpcId: !Ref 'VPC'
    EcsSecurityGroupIngressFromSelf:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        Description: Ingress from other containers in the same security group
        GroupId: !Ref 'FargateContainerSecurityGroup'
        IpProtocol: -1
        SourceSecurityGroupId: !Ref 'FargateContainerSecurityGroup'
    # This is an IAM role which authorizes ECS to manage resources on your
    # account on your behalf, such as updating your load balancer with the
    # details of where your containers are, so that traffic can reach your
    # containers.
    ECSRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: [ecs.amazonaws.com]
              Action: ['sts:AssumeRole']
        Path: /
        Policies:
          - PolicyName: ecs-service
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    # Rules which allow ECS to attach network interfaces to instances
                    # on your behalf in order for awsvpc networking mode to work right
                    - 'ec2:AttachNetworkInterface'
                    - 'ec2:CreateNetworkInterface'
                    - 'ec2:CreateNetworkInterfacePermission'
                    - 'ec2:DeleteNetworkInterface'
                    - 'ec2:DeleteNetworkInterfacePermission'
                    - 'ec2:Describe*'
                    - 'ec2:DetachNetworkInterface'
                  Resource: '*'

    # This is a role which is used by the ECS tasks themselves.
    ECSTaskExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: [ecs-tasks.amazonaws.com]
              Action: ['sts:AssumeRole']
        Path: /
        Policies:
          - PolicyName: AmazonECSTaskExecutionRolePolicy
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    # Allow the ECS Tasks to download images from ECR
                    - 'ecr:GetAuthorizationToken'
                    - 'ecr:BatchCheckLayerAvailability'
                    - 'ecr:GetDownloadUrlForLayer'
                    - 'ecr:BatchGetImage'

                    # Allow the ECS tasks to upload logs to CloudWatch
                    - 'logs:CreateLogStream'
                    - 'logs:PutLogEvents'
                  Resource: '*'



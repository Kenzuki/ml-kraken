service: ml-kraken-api

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-aws-documentation

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations

  # You must have the documentation object
  documentation:
    api:
      info:
        version: '1'
        title: ML-Kraken-API
        description: API for ML-Kraken
        termsOfService: https://www.google.com
        contact:
          name: Jakub Wszolek
          url: https://github.com/datamass-io/ml-kraken
          email: j.wszolek@datamass.io
        license:
          name: The license
          url: https://www.github.com
    # Now we describe all the models that we use
    models:
      -
        name: MessageResponse
        contentType: "application/json"
#        schema: ${file(models/error.json)}
        schema:
          type: object
          properties:
            message:
              type: string
            id:
              type: string

provider:
  name: aws
  runtime: nodejs10.x
  region: eu-west-1
  environment:
    DYNAMODB_TABLE: ModelMetaDynamoDbTable
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:eu-west-1:*:*"


functions:
  model-meta-create:
    handler: model-meta/create.create
    events:
      - http:
          path: api/v1/model-meta
          method: post
          cors: true
          documentation:
            summary: Post a model definition
            description: >
              Demonstrates a POST method.
            queryParams:
              - name: firstParam
                description: The first param that we want, you MUST pass it
                required: true
              - name: secondParam
                description: The second param. This one is optional
            methodResponses:
              - statusCode: '200'
                responseModels:
                  "application/json": MessageResponse
                responseHeaders:
                  - name: link
                    description: describes other actions that can be taken
                    type: string

  model-meta-list:
    handler: model-meta/list.list
    events:
      - http:
          path: api/v1/model-meta
          method: get
          cors: true

  model-meta-get:
    handler: model-meta/get.get
    events:
      - http:
          path: api/v1/model-meta/{id}
          method: get
          cors: true

  model-meta-update:
    handler: model-meta/update.update
    events:
      - http:
          path: api/v1/model-meta/{id}
          method: put
          cors: true

  model-meta-delete:
    handler: model-meta/delete.delete
    events:
      - http:
          path: api/v1/model-meta/{id}
          method: delete
          cors: true

resources:
  Resources:
    ModelMetaDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}


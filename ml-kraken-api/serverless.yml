service: ml-kraken-api

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-aws-documentation
  - serverless-offline-sqs

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations
  serverless-offline-sqs:
    autoCreate: true                 # create queue if not exists
    apiVersion: '2012-11-05'
    endpoint: http://0.0.0.0:9324
    region: eu-west-1
    accessKeyId: root
    secretAccessKey: root
    skipCacheInvalidation: false

  # You must have the documentation object
  documentation:
    api:
      info:
        version: '1'
        title: ML-Kraken-API
        description: API for ML-Kraken
        termsOfService: https://www.google.com
        contact:
          name: Jakub Wszolek
          url: https://github.com/datamass-io/ml-kraken
          email: j.wszolek@datamass.io
        license:
          name: The license
          url: https://www.github.com
    # Now we describe all the models that we use
    models:
      -
        name: MessageResponse
        contentType: "application/json"
#        schema: ${file(models/error.json)}
        schema:
          type: object
          properties:
            id:
              type: string
            ver:
              type: string
            name:
              type: string
            user:
              type: string
            createdAt:
              type: string
            updatedAt:
              type: string

provider:
  name: aws
  runtime: nodejs10.x
  region: eu-west-1
  environment:
    DYNAMODB_TABLE: ModelMetaDynamoDbTable
    DYNAMODB_MSTATUS: ModelStatusTbl
    SQS_URL:
      Ref: ActionQueue
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:eu-west-1:*:*"
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:GetQueueUrl
        - sqs:ListQueues
      Resource: "arn:aws:sqs:eu-west-1:*:*"


functions:
  sqs-consumer:
    handler: model-action/sqsConsumer.consumer
    events:
      - sqs:
#          arn: rn:aws:sqs:region:XXXXXX:default
          arn:
            Fn::GetAtt: [ActionQueue, Arn]

  model-status-list:
    handler: model-status/listStatuses.listStatuses
    events:
      - http:
          path: api/v1/model-status/{id}
          method: get
          integration: lambda
          cors: true

  model-action-run:
    handler: model-action/takeAction.takeAction
    events:
      - http:
          path: api/v1/model-action
          method: post
          integration: lambda
          cors: true

  model-meta-create:
    handler: model-meta/create.create
    events:
      - http:
          path: api/v1/model-meta
          method: post
          integration: lambda
          cors: true
          documentation:
            summary: Post a model definition
#            description: >
#              Demonstrates a POST method.
            queryParams:
              - name: name
                required: true
              - name: ver
                #description: The second param. This one is optional
                required: true
              - name: uri
                required: true
              - name: user
                required: true
            methodResponses:
              - statusCode: '200'
                responseModels:
                  "application/json": MessageResponse


  model-meta-list:
    handler: model-meta/list.list
    events:
      - http:
          path: api/v1/model-meta
          method: get
          integration: lambda
          cors: true
#          documentation:
#            summary: Get all models
##            description: >
##              Demonstrates a POST method.
#            methodResponses:
#              - statusCode: '200'
#                responseModels:
#                  "application/json": MessageResponse


  model-meta-get:
    handler: model-meta/get.get
    events:
      - http:
          path: api/v1/model-meta/{id}
          method: get
          integration: lambda
          cors: true
#          documentation:
#            summary: Get all models
#            #            description: >
#            #              Demonstrates a POST method.
#            queryParams:
#              - id: name
#                required: true
#            methodResponses:
#              - statusCode: '200'
#                responseModels:
#                  "application/json": MessageResponse


  model-meta-update:
    handler: model-meta/update.update
    events:
      - http:
          path: api/v1/model-meta/{id}
          method: put
          integration: lambda
          cors: true
#          documentation:
#            summary: Update model.
#            #            description: >
#            #              Demonstrates a POST method.
#            methodResponses:
#              - statusCode: '200'
#                responseModels:
#                  "application/json": MessageResponse


  model-meta-delete:
    handler: model-meta/delete.deleteM
    events:
      - http:
          path: api/v1/model-meta/{id}
          method: delete
          integration: lambda
          cors: true
#          documentation:
#            summary: Delete model.
#            #            description: >
#            #              Demonstrates a POST method.
#            methodResponses:
#              - statusCode: '200'
#                responseModels:
#                  "application/json": MessageResponse


resources:
  Resources:
    ModelMetaDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
    ModelStatusTbl:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_MSTATUS}
    ActionQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "ActionQueue"

